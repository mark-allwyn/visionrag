[project]
name = "visionrag"
version = "2.0.0"
description = "Vision-RAG Conversational QA with intelligent text chunking and multimodal embeddings"
authors = [
    {name = "Mark Allwyn", email = "mark@example.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["rag", "vision", "ai", "embeddings", "streamlit", "chunking"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Indexing",
]

dependencies = [
    # Core Streamlit Application
    "streamlit>=1.28.0",
    "python-dotenv>=1.0.0",
    
    # AI Model Providers
    "google-generativeai>=0.3.0",
    "cohere>=4.0.0",
    "openai>=1.0.0",
    "anthropic>=0.3.0",
    
    # Document Processing & Embeddings
    "langchain-community>=0.0.20",
    "langchain-cohere>=0.0.4",
    "unstructured>=0.10.0",
    "nltk>=3.8.1",
    "PyMuPDF>=1.23.0",
    "pdfminer.six>=20221105",
    
    # Image Processing
    "Pillow>=10.0.0",
    "numpy>=1.24.0",
    
    # Vector Store
    "faiss-cpu>=1.7.0",
    
    # Optional: Office Document Support
    "python-docx>=0.8.11",
    "python-pptx>=0.6.21",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

gpu = [
    "faiss-gpu>=1.7.0",  # GPU version of FAISS for better performance
]

[project.urls]
Homepage = "https://github.com/mark-allwyn/visionrag"
Repository = "https://github.com/mark-allwyn/visionrag"
Issues = "https://github.com/mark-allwyn/visionrag/issues"

[project.scripts]
visionrag = "visionrag:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
dev-dependencies = [
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
]

[tool.black]
line-length = 88
target-version = ['py310']
include = '\.pyi?$'

[tool.ruff]
line-length = 88
target-version = "py310"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_incomplete_defs = false
check_untyped_defs = true
disallow_untyped_decorators = false
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
pythonpath = ["."]

[tool.coverage.run]
source = ["visionrag"]
omit = [
    "tests/*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
